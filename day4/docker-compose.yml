version: '3.8'

services:
  # Flink Cluster with Session Mode
  jobmanager:
    image: flink:1.17.1-scala_2.12
    hostname: jobmanager
    container_name: flink-jobmanager-advanced
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager\nstate.backend: rocksdb\nstate.backend.incremental: true\nstate.checkpoints.dir: file:///tmp/flink-checkpoints\nstate.savepoints.dir: file:///tmp/flink-savepoints\nexecution.checkpointing.interval: 30s\nexecution.checkpointing.timeout: 10min\nexecution.checkpointing.max-concurrent-checkpoints: 1\nrestart-strategy: fixed-delay\nrestart-strategy.fixed-delay.attempts: 3\nrestart-strategy.fixed-delay.delay: 30s
    volumes:
      - ./flink-jobs:/opt/flink/jobs
      - ./flink-checkpoints:/tmp/flink-checkpoints
      - ./flink-savepoints:/tmp/flink-savepoints
      - ./flink-lib:/opt/flink/lib

  taskmanager:
    image: flink:1.17.1-scala_2.12
    hostname: taskmanager
    container_name: flink-taskmanager-advanced
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 3
    environment:
      - FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager\ntaskmanager.numberOfTaskSlots: 4\ntaskmanager.memory.process.size: 2gb\ntaskmanager.memory.managed.fraction: 0.4
    volumes:
      - ./flink-jobs:/opt/flink/jobs
      - ./flink-checkpoints:/tmp/flink-checkpoints
      - ./flink-savepoints:/tmp/flink-savepoints
      - ./flink-lib:/opt/flink/lib

  # Kafka Cluster
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-advanced
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-advanced
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  # Redis for external lookups
  redis:
    image: redis:7-alpine
    container_name: redis-advanced
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes

  # PostgreSQL for state store
  postgres:
    image: postgres:15
    container_name: postgres-advanced
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: flink_state
      POSTGRES_USER: flink
      POSTGRES_PASSWORD: flink123
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d

  # Cassandra for time-series data
  cassandra:
    image: cassandra:4.0
    container_name: cassandra-advanced
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: flink_cluster
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      CASSANDRA_DC: dc1
    volumes:
      - cassandra-data:/var/lib/cassandra

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-advanced
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-advanced
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning

volumes:
  postgres-data:
  cassandra-data:
  prometheus-data:
  grafana-data: