version: '3.8'

services:
  # LocalStack for AWS services emulation
  localstack:
    image: localstack/localstack:2.3
    container_name: localstack-aws
    ports:
      - "4566:4566"            # LocalStack Gateway
      - "4510-4559:4510-4559"  # External services port range
    environment:
      DEBUG: 1
      SERVICES: kinesis,kinesisanalytics,kafka,s3,dynamodb,lambda,iam,sts,logs,cloudwatch
      DATA_DIR: /tmp/localstack/data
      DOCKER_HOST: unix:///var/run/docker.sock
      START_WEB: 1
    volumes:
      - "./localstack-data:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./aws-setup:/etc/localstack/init/ready.d"

  # AWS CLI container for setup
  aws-cli:
    image: amazon/aws-cli:latest
    container_name: aws-cli-setup
    depends_on:
      - localstack
    environment:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1
      AWS_ENDPOINT_URL: http://localstack:4566
    volumes:
      - "./aws-setup:/aws-setup"
      - "./data:/data"
    command: tail -f /dev/null

  # Kinesis Data Generator
  kinesis-generator:
    build:
      context: ./kinesis-generator
      dockerfile: Dockerfile
    container_name: kinesis-data-generator
    depends_on:
      - localstack
    environment:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1
      KINESIS_ENDPOINT: http://localstack:4566
      STREAM_NAME: demo-stream
    volumes:
      - "./kinesis-generator:/app"

  # MSK Simulator (using Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-msk
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-msk:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-msk-simulator
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-msk:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  # Flink for KDA simulation
  flink-jobmanager:
    image: flink:1.17.1-scala_2.12
    container_name: flink-kda-simulator
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - FLINK_PROPERTIES=jobmanager.rpc.address: flink-jobmanager\nparallelism.default: 2\nstate.backend: rocksdb\nstate.checkpoints.dir: file:///tmp/flink-checkpoints\nexecution.checkpointing.interval: 60s
    volumes:
      - ./flink-jobs:/opt/flink/jobs
      - ./flink-lib:/opt/flink/lib

  flink-taskmanager:
    image: flink:1.17.1-scala_2.12
    container_name: flink-kda-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 2
    environment:
      - FLINK_PROPERTIES=jobmanager.rpc.address: flink-jobmanager\ntaskmanager.numberOfTaskSlots: 4
    volumes:
      - ./flink-jobs:/opt/flink/jobs
      - ./flink-lib:/opt/flink/lib

  # DynamoDB GUI
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin:latest
    container_name: dynamodb-admin
    depends_on:
      - localstack
    ports:
      - "8001:8001"
    environment:
      DYNAMO_ENDPOINT: http://localstack:4566

  # CloudWatch Dashboard Simulator
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-aws
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-aws-data:/var/lib/grafana
      - ./grafana-config:/etc/grafana/provisioning

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-aws
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-config:/etc/prometheus
      - prometheus-aws-data:/prometheus

  # Data Processing Applications
  stream-processor:
    build:
      context: ./stream-processor
      dockerfile: Dockerfile
    container_name: stream-processor-aws
    depends_on:
      - localstack
      - kafka-msk
    environment:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1
      KINESIS_ENDPOINT: http://localstack:4566
      KAFKA_BOOTSTRAP_SERVERS: kafka-msk:29092
    volumes:
      - "./stream-processor:/app"

volumes:
  grafana-aws-data:
  prometheus-aws-data: